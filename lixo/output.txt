def tarjan_iterative(maze, N, M, sx, sy):
    dfn = [[0] * M for _ in range(N)]
    low = [[0] * M for _ in range(N)]
    parent = [[(-1, -1)] * M for _ in range(N)]
    idx = 1
    stack = [(sx, sy)]
    dfn[sx][sy] = low[sx][sy] = idx
    bridges = []

    while stack:
        x, y = stack[-1]
        found = False
        for dx, dy in [(1, 0), (-1, 0), (0, 1), (0, -1)]:
            nx, ny = x + dx, y + dy
            if 0 <= nx < N and 0 <= ny < M and (maze[nx][ny] == 'M' or maze[nx][ny] == '.') and parent[x][y] != (nx, ny):
                if dfn[nx][ny] == 0:
                    stack.append((nx, ny))
                    dfn[nx][ny] = low[nx][ny] = idx = idx + 1
                    parent[nx][ny] = (x, y)
                    found = True
                else:
                    low[x][y] = min(low[x][y], dfn[nx][ny])

        if not found:
            stack.pop()
            for dx, dy in [(1, 0), (-1, 0), (0, 1), (0, -1)]:
                nx, ny = x + dx, y + dy
                if 0 <= nx < N and 0 <= ny < M and (maze[nx][ny] == 'M' or maze[nx][ny] == '.') and parent[x][y] != (nx, ny):
                    if low[nx][ny] > dfn[x][y]:
                        bridges.append((x, y, nx, ny))
                    low[x][y] = min(low[x][y], low[nx][ny])
    return bridges


flood_gate = random.choice(bridges)
print(f"{flood_gate[0]} {flood_gate[1]} {flood_gate[2]} {flood_gate[3]}")